**Lista se criam a partir do []
EX: Lista_1 =  []
**Para criar lista dentro de listas Ã© sÃ³ usar [] dentro de []
**Para fazer slicing usamos :
Ex: Lista_1[:3] ou [1:3] ou [3:0]
**Para adicionar novo valor dentro da lista usamos .extend() ou .append() - append ele coloca uma lista dentro da lista
EX: Lista_1.extend(novo valor) ou Lista_1.append()
**Para substituir elementos podemos dar o index:  A = [1,2,3,4] - A[0] = 10 - A = [10,2,3,4]
**Para apagar usamos metodo del :  EX del(A[0])
O metodo .split pode fazer uma string virar lista. 'Jogar bola'.split() - [jogar, bola]

**Tuplas se criam a partir do ()
EX: Tupla = ()
Comando len nos dÃ¡ o tamanho EX: len(tuple)

**Dicionarios
Metodo .Key pega todos as chaves do dicionario e o metodo .values retorna todos os valores

**Conjunto
Cria-se usando {} mas diferente do dicionario nÃ£o usa-se :
Pode-se adicionar um elemento a partir do .add() e para remover seria .remove()
Podemo ver elementos iguais em dois conjuntos usando set1 & set2 ou .intersection - e podemos ver elementos diferentes com o .difference()

**LAÃ‡O
Range() : Dentro de parenteses temos a sequencia desejada. Se colocarmos range(10,15) a sequencia a partir do primeiro numero(10) e vai ate p segundo numero.
Enumerates(lista,range etc) mostra o index de cada iteraÃ§Ã£o
WHILE SINTAX: i=0 while(lista[i] condiÃ§Ã£o) - i sendo o index

**O que Ã© uma API REST?

API (Application Programming Interface) Ã© uma forma de sistemas diferentes se comunicarem.

REST (Representational State Transfer) Ã© um estilo de arquitetura para APIs.

Uma API REST geralmente troca dados no formato JSON (Ã s vezes XML).

Ela segue princÃ­pios simples usando o protocolo HTTP.

ðŸ”¹ MÃ©todos HTTP mais comuns

Quando vocÃª acessa uma API REST, vocÃª usa solicitaÃ§Ãµes HTTP. Os principais mÃ©todos sÃ£o:

GET â†’ Buscar informaÃ§Ãµes (ex.: consultar usuÃ¡rios).

POST â†’ Enviar dados (ex.: cadastrar novo usuÃ¡rio).

PUT â†’ Atualizar dados existentes (ex.: editar usuÃ¡rio).

DELETE â†’ Remover dados (ex.: excluir usuÃ¡rio).

ðŸ”¹ Estrutura de uma requisiÃ§Ã£o HTTP

Uma requisiÃ§Ã£o tem trÃªs partes principais:

URL/Endpoint â†’ O endereÃ§o da API (ex.: https://api.exemplo.com/users).

CabeÃ§alhos (Headers) â†’ InformaÃ§Ãµes extras, como autenticaÃ§Ã£o (Authorization: Bearer token123).

Corpo (Body) â†’ Dados enviados (usado em POST/PUT, geralmente em JSON).

ðŸ”¹ Exemplo em Python com requests

A biblioteca mais usada Ã© a requests.

ðŸ‘‰ GET (buscar dados)
import requests

url = "https://jsonplaceholder.typicode.com/posts/1"
response = requests.get(url)

print(response.status_code)  # 200 = OK
print(response.json())       # Converte JSON em dicionÃ¡rio Python

ðŸ‘‰ POST (enviar dados)
import requests

url = "https://jsonplaceholder.typicode.com/posts"
data = {
    "title": "Novo post",
    "body": "ConteÃºdo do post",
    "userId": 1
}

response = requests.post(url, json=data)
print(response.status_code)  
print(response.json())       # Mostra a resposta da API

** WEB SCRAPPING
import requests
from bs4 import BeautifulSoup
# Specify the URL of the webpage you want to scrape
url = 'https://en.wikipedia.org/wiki/IBM'
# Send an HTTP GET request to the webpage
response = requests.get(url)
# Store the HTML content in a variable
html_content = response.text
# Create a BeautifulSoup object to parse the HTML
soup = BeautifulSoup(html_content, 'html.parser')
# Display a snippet of the HTML content
print(html_content[:500])
# Find all <a> tags (anchor tags) in the HTML
links = soup.find_all('a')
# Iterate through the list of links and print their text
for link in links:
    print(link.text)
